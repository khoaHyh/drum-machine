{"version":3,"sources":["components/DrumPad.js","components/DrumList.js","sounds.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["DrumPad","props","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","event","keyCode","sound","currentTime","play","catch","err","console","log","updateDisplay","id","replace","keyboard","src","onClick","className","ref","element","Component","DrumList","sounds","map","i","CHANGE_DISPLAY_FIELD","App","innerText","handleDisplay","connect","state","detectSound","dispatch","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e6a816ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './DrumPad.css';\n\nclass DrumPad extends Component {\n    constructor(props) {\n        super(props);\n        this.playSound = this.playSound.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    // EventListener for keypress\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    // Plays the appropriate sound upon keypress\n    handleKeyPress(event) {\n        if (event.keyCode === this.props.keyCode) {\n            this.playSound();\n        }\n    }\n\n    // Access audio element and play sound\n    playSound() {\n        this.sound.currentTime = 0;\n        this.sound.play().catch(err => console.log(err));\n        // Replaces any dashes in the id with spaces\n        this.props.updateDisplay(this.props.id.replace('-', ' '));\n    }\n\n    render() {\n        const { id, keyboard, src } = this.props;\n        return (\n            <button id={id} onClick={this.playSound} className=\"drum-pad\">\n                {keyboard}\n                <audio \n                    id={keyboard} \n                    className=\"clip\" \n                    ref={(element) => {this.sound = element}}  \n                    src={src} \n                />\n            </button>\n        );\n    }\n}\n\nexport default DrumPad;\n","import React, { Component } from 'react';\nimport DrumPad from './DrumPad';\n\n// Pass in an array of objects to display through array.map\nexport default class DrumList extends Component {\n\n    render() {\n        const { sounds } = this.props;\n        return(\n            sounds.map((sound, i) => {\n                return (\n                    <DrumPad \n                        key={i}\n                        id={sounds[i].id}\n                        keyCode={sounds[i].keyCode}\n                        keyboard={sounds[i].keyboard}\n                        src={sounds[i].src}\n                        // passed in from App.js to update display element\n                        updateDisplay={this.props.updateDisplay}\n                    />\n                );\n            })\n        )\n    }\n}","// Array containing sounds that will be used for src attributes\nconst sounds = [\n    {\n        id: \"Heater-1\",\n        keyCode: 81,\n        keyboard: \"Q\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n    },\n    {\n        id: \"Heater-2\",\n        keyCode: 87,\n        keyboard: \"W\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n    },\n    {\n        id: \"Heater-3\",\n        keyCode: 69,\n        keyboard: \"E\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n    },\n    {\n        id: \"Heater-4\",\n        keyCode: 65,\n        keyboard: \"A\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n    },\n    {\n        id: \"Clap\",\n        keyCode: 83,\n        keyboard: \"S\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n    },\n    {\n        id: \"Open High-hat\",\n        keyCode: 68,\n        keyboard: \"D\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n    },\n    {\n        id: \"Kick N Hat\",\n        keyCode: 90,\n        keyboard: \"Z\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n    },\n    {\n        id: \"Kick\",\n        keyCode: 88,\n        keyboard: \"X\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n    },\n    {\n        id: \"Punchy-kick\",\n        keyCode: 67,\n        keyboard: \"C\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\n    }\n]\n\nexport default sounds;","export const CHANGE_DISPLAY_FIELD = 'CHANGE_DISPLAY_FIELD';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport DrumList from '../components/DrumList';\nimport sounds from '../sounds';\nimport { setDisplayField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    innerText: state.detectSound.innerText\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleDisplay: (event) => dispatch(setDisplayField(event))\n  }\n}\n\nclass App extends Component {\n \n  render() {\n    const { innerText, handleDisplay } = this.props;\n    return (\n      <div className=\"App\">\n        <ReactFCCtest />\n        <div id=\"drum-machine\">\n          <div className=\"drum-container\">\n            <DrumList updateDisplay={handleDisplay} sounds={sounds} />\n          </div>\n          <p id=\"display\">{innerText}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_DISPLAY_FIELD } from './constants';\n\nexport const setDisplayField = (sound) => ({\n    type: CHANGE_DISPLAY_FIELD,\n    payload: sound\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_DISPLAY_FIELD } from \"./constants\";\n\n// takes state and action and always returns a new state\nconst initialState = {\n    innerText: ''\n}\n\nexport const detectSound = (state=initialState, action={}) => {\n    switch(action.type) {\n        case CHANGE_DISPLAY_FIELD:\n            return Object.assign({}, state, {innerText: action.payload});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { detectSound } from './reducers';\n\n// Monitor actions with middleware\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ detectSound });\n\nconst store = createStore(rootReducer, applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider> ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}