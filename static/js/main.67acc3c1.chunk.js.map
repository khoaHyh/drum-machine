{"version":3,"sources":["components/DrumPad.js","components/DrumList.js","sounds.js","containers/App.js","reportWebVitals.js","index.js"],"names":["drumPadStyle","border","borderRadius","backgroundColor","margin","width","height","fontSize","DrumPad","props","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","event","keyCode","sound","currentTime","play","catch","err","console","log","updateDisplay","id","replace","keyboard","src","onClick","className","style","ref","element","Component","DrumList","sounds","map","i","App","state","innerText","handleDisplay","name","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"0QAGMA,EAAe,CACjBC,OAAQ,kBACRC,aAAc,UACdC,gBAAiB,OACjBC,OAAQ,SACRC,MAAO,SACPC,OAAQ,SACRC,SAAU,QAGOC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAHP,E,gEAQfE,SAASC,iBAAiB,UAAWC,KAAKH,kB,6CAI1CC,SAASG,oBAAoB,UAAWD,KAAKH,kB,qCAIlCK,GACPA,EAAMC,UAAYH,KAAKN,MAAMS,SAC7BH,KAAKL,c,kCAMTK,KAAKI,MAAMC,YAAc,EACzBL,KAAKI,MAAME,OAAOC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAC3CR,KAAKN,MAAMiB,cAAcX,KAAKN,MAAMkB,GAAGC,QAAQ,IAAK,Q,+BAG9C,IAAD,SACyBb,KAAKN,MAA3BkB,EADH,EACGA,GAAIE,EADP,EACOA,SAAUC,EADjB,EACiBA,IACtB,OACI,yBAAQH,GAAIA,EAAII,QAAShB,KAAKL,UAAWsB,UAAU,WAAWC,MAAOjC,EAArE,UACK6B,EACD,uBACIF,GAAIE,EACJG,UAAU,OACVE,IAAK,SAACC,GAAa,EAAKhB,MAAQgB,GAChCL,IAAKA,W,GAvCYM,aCThBC,E,uKAEP,IAAD,OACGC,EAAWvB,KAAKN,MAAhB6B,OACR,OACIA,EAAOC,KAAI,SAACpB,EAAOqB,GACf,OACI,cAAC,EAAD,CAEIb,GAAIW,EAAOE,GAAGb,GACdT,QAASoB,EAAOE,GAAGtB,QACnBW,SAAUS,EAAOE,GAAGX,SACpBC,IAAKQ,EAAOE,GAAGV,IAEfJ,cAAe,EAAKjB,MAAMiB,eANrBc,U,GARSJ,aCsDvBE,EAzDA,CACX,CACIX,GAAI,WACJT,QAAS,GACTW,SAAU,IACVC,IAAK,4DAET,CACIH,GAAI,WACJT,QAAS,GACTW,SAAU,IACVC,IAAK,4DAET,CACIH,GAAI,WACJT,QAAS,GACTW,SAAU,IACVC,IAAK,4DAET,CACIH,GAAI,WACJT,QAAS,GACTW,SAAU,IACVC,IAAK,8DAET,CACIH,GAAI,OACJT,QAAS,GACTW,SAAU,IACVC,IAAK,4DAET,CACIH,GAAI,gBACJT,QAAS,GACTW,SAAU,IACVC,IAAK,0DAET,CACIH,GAAI,aACJT,QAAS,GACTW,SAAU,IACVC,IAAK,8DAET,CACIH,GAAI,OACJT,QAAS,GACTW,SAAU,IACVC,IAAK,8DAET,CACIH,GAAI,cACJT,QAAS,GACTW,SAAU,IACVC,IAAK,kECdEW,E,kDA9Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAW,IAEb,EAAKC,cAAgB,EAAKA,cAAcjC,KAAnB,gBALT,E,0DAQAkC,GACZ9B,KAAK+B,SAAS,CACZH,UAAWE,M,+BAIL,IACAF,EAAc5B,KAAK2B,MAAnBC,UACR,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,IAAD,IACA,sBAAKL,GAAG,eAAR,UACE,qBAAKK,UAAU,iBAAf,SACE,cAAC,EAAD,CAAUN,cAAeX,KAAK6B,cAAeN,OAAQA,MAEvD,mBAAGX,GAAG,UAAN,SAAiBgB,c,GAxBTP,aCGHW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACF5C,SAAS6C,eAAe,SAM1BX,M","file":"static/js/main.67acc3c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Inline-styling for drum-pad\nconst drumPadStyle = {\n    border: \"solid 2px black\",\n    borderRadius: \"0.25rem\",\n    backgroundColor: \"pink\",\n    margin: \"0.5rem\",\n    width: \"5.4rem\",\n    height: \"5.4rem\",\n    fontSize: \"2rem\"\n}\n\nexport default class DrumPad extends Component {\n    constructor(props) {\n        super(props);\n        this.playSound = this.playSound.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    // EventListener for keypress\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    // Plays the appropriate sound upon keypress\n    handleKeyPress(event) {\n        if (event.keyCode === this.props.keyCode) {\n            this.playSound();\n        }\n    }\n\n    // Access audio element and play sound\n    playSound() {\n        this.sound.currentTime = 0;\n        this.sound.play().catch(err => console.log(err));\n        this.props.updateDisplay(this.props.id.replace('-', ' '));\n    }\n\n    render() {\n        const { id, keyboard, src } = this.props;\n        return (\n            <button id={id} onClick={this.playSound} className=\"drum-pad\" style={drumPadStyle}>\n                {keyboard}\n                <audio \n                    id={keyboard} \n                    className=\"clip\" \n                    ref={(element) => {this.sound = element}}  \n                    src={src} \n                />\n            </button>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport DrumPad from './DrumPad';\n\n// Pass in an array of objects to display through array.map\nexport default class DrumList extends Component {\n\n    render() {\n        const { sounds } = this.props;\n        return(\n            sounds.map((sound, i) => {\n                return (\n                    <DrumPad \n                        key={i}\n                        id={sounds[i].id}\n                        keyCode={sounds[i].keyCode}\n                        keyboard={sounds[i].keyboard}\n                        src={sounds[i].src}\n                        // passed in from App.js to update display element\n                        updateDisplay={this.props.updateDisplay}\n                    />\n                );\n            })\n        )\n    }\n}","// Array containing sounds that will be used for src attributes\nconst sounds = [\n    {\n        id: \"Heater-1\",\n        keyCode: 81,\n        keyboard: \"Q\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n    },\n    {\n        id: \"Heater-2\",\n        keyCode: 87,\n        keyboard: \"W\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n    },\n    {\n        id: \"Heater-3\",\n        keyCode: 69,\n        keyboard: \"E\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n    },\n    {\n        id: \"Heater-4\",\n        keyCode: 65,\n        keyboard: \"A\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n    },\n    {\n        id: \"Clap\",\n        keyCode: 83,\n        keyboard: \"S\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n    },\n    {\n        id: \"Open High-hat\",\n        keyCode: 68,\n        keyboard: \"D\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n    },\n    {\n        id: \"Kick N Hat\",\n        keyCode: 90,\n        keyboard: \"Z\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n    },\n    {\n        id: \"Kick\",\n        keyCode: 88,\n        keyboard: \"X\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n    },\n    {\n        id: \"Punchy-kick\",\n        keyCode: 67,\n        keyboard: \"C\",\n        src: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\n    }\n]\n\nexport default sounds;","import React, { Component } from 'react';\nimport './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport DrumList from '../components/DrumList';\nimport sounds from '../sounds';\n\n// when .drum-pad is triggered, a string describing the associated\n//  audio clip is displayed as inner text of #display element\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      innerText: ''\n    }\n    this.handleDisplay = this.handleDisplay.bind(this);\n  }\n\n  handleDisplay(name) {\n    this.setState({\n      innerText: name\n    })\n  }\n \n  render() {\n    const { innerText } = this.state;\n    return (\n      <div className=\"App\">\n        <ReactFCCtest />\n        <div id=\"drum-machine\">\n          <div className=\"drum-container\">\n            <DrumList updateDisplay={this.handleDisplay} sounds={sounds} />\n          </div>\n          <p id=\"display\">{innerText}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}